GENERATING NOISE

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread("tree.jpg", cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (256, 256))
img_float = img.astype(np.float32) / 255.0

gaussian = img_float + np.random.normal(0, 0.5, img.shape)
impulse = np.copy(img_float)
prob = 0.3
rnd = np.random.rand(*img.shape)
impulse[rnd < (prob / 2)] = 0.0
impulse[rnd > 1 - (prob / 2)] = 1.0
poisson = np.random.poisson(img_float * 255.0) / 255.0
exp_noise = np.random.exponential(0.1, img.shape)
exponential = np.clip(img_float + exp_noise, 0, 1)
gamma_noise = np.random.gamma(2.0, 0.1, img.shape)
gamma = np.clip(img_float + gamma_noise, 0, 1)
rayleigh_noise = np.random.rayleigh(0.1, img.shape)
rayleigh = np.clip(img_float + rayleigh_noise, 0, 1)
uniform_noise = np.random.uniform(-0.2, 0.2, img.shape)
uniform = np.clip(img_float + uniform_noise, 0, 1)


titles = ["Original","Gaussian","Impulse","Poisson","Exponential","Gamma","Rayleigh","Uniform"]
images = [img_float,gaussian,impulse,poisson,exponential,gamma,rayleigh,uniform]

for im,name in zip(images,titles):
    cv2.imwrite(f"{name}.png",(im*255).astype(np.uint8))

plt.figure(figsize=(14,12))
for i in range(len(images)):
    plt.subplot(4,4,i+1)
    plt.imshow(images[i],cmap='gray')
    plt.title(titles[i],fontsize=8)
    plt.axis("off")
plt.suptitle("Noise Models",fontsize=14)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,50))
for i,(im,title) in enumerate(zip(images,titles)):
    plt.subplot(len(images),2,2*i+1)
    plt.imshow(im,cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.subplot(len(images),2,2*i+2)
    flat=(im*255).flatten()
    plt.hist(flat,bins='auto',color='gray',alpha=0.7,density=True)
    mean_val=np.mean(flat)
    std_val=np.std(flat)
    plt.axvline(mean_val,color='r',linestyle='--',linewidth=1,label=f"Mean={mean_val:.1f}")
    plt.axvline(mean_val+std_val,color='b',linestyle='--',linewidth=1,label="+1σ")
    plt.axvline(mean_val-std_val,color='b',linestyle='--',linewidth=1,label="-1σ")
    plt.title(f"{title} histogram")
    plt.xlabel("Pixel Intensity")
    plt.ylabel("Probability Density")
plt.tight_layout()
plt.show()




FOURIER

import numpy as np
import cv2
import matplotlib.pyplot as plt

img1 = cv2.imread("VertStripe1.png", cv2.IMREAD_GRAYSCALE)
img2 = cv2.imread("VerticalStripes.png", cv2.IMREAD_GRAYSCALE)

if img1 is None:
    print("Error: VertStripe1.png not found")
elif img2 is None:
    print("Error: VerticalStripes.png not found")
else:
    height, width = img1.shape
    img2 = cv2.resize(img2, (width, height))

    def fourier_analysis(img):
        f = np.fft.fft2(img)
        fshift = np.fft.fftshift(f)
        magnitude = np.abs(fshift)
        phase = np.angle(fshift)
        amplitude = 20 * np.log(np.abs(fshift) + 1)
        f_ishift = np.fft.ifftshift(fshift)
        img_reconstructed = np.abs(np.fft.ifft2(f_ishift))
        return f, fshift, magnitude, phase, amplitude, img_reconstructed

    f1, fshift1, mag1, ph1, amp1, rec1 = fourier_analysis(img1)
    f2, fshift2, mag2, ph2, amp2, rec2 = fourier_analysis(img2)
    diff_mag = np.abs(mag1 - mag2)
    diff_phase = np.abs(ph1 - ph2)

    def show_images(images, titles, rows, cols, cmap='gray'):
        plt.figure(figsize=(12, 6))
        for i, (img, title) in enumerate(zip(images, titles), 1):
            plt.subplot(rows, cols, i)
            plt.imshow(img, cmap=cmap)
            plt.title(title)
            plt.axis('off')
        plt.tight_layout()
        plt.show()

    show_images([img1, np.abs(f1), mag1, ph1, 20*np.log(np.abs(f1)+1), amp1],
                ['Original Image1', 'Magnitude(No Shift)', 'Magnitude(Shift)', 'Phase Spectrum', 'Amplitude(No Shift)', 'Amplitude(Shift)'], 2, 3)

    show_images([img2, np.abs(f2), mag2, ph2, 20*np.log(np.abs(f2)+1), amp2],
                ['Original Image2', 'Magnitude(No Shift)', 'Magnitude(Shift)', 'Phase Spectrum', 'Amplitude(No Shift)', 'Amplitude(Shift)'], 2, 3)

    plt.figure(figsize=(12, 4))
    plt.subplot(1, 3, 1), plt.imshow(diff_mag, cmap='hot'), plt.title("Magnitude Diff"), plt.colorbar(), plt.axis('off')
    plt.subplot(1, 3, 2), plt.imshow(diff_phase, cmap='hot'), plt.title("Phase Diff"), plt.colorbar(), plt.axis('off')
    plt.subplot(1, 3, 3)
    plt.hist(mag1.flatten(), bins=50, alpha=0.7, label='Image1')
    plt.hist(mag2.flatten(), bins=50, alpha=0.7, label='Image2')
    plt.title('Magnitude Distribution')
    plt.legend()
    plt.tight_layout()
    plt.show()

    center_row, center_col = mag1.shape[0]//2, mag1.shape[1]//2
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(mag1[center_row, :], label='Image1')
    plt.plot(mag2[center_row, :], label='Image2')
    plt.title("Horizontal Center Line"), plt.legend()
    plt.subplot(1, 2, 2)
    plt.plot(mag1[:, center_col], label='Image1')
    plt.plot(mag2[:, center_col], label='Image2')
    plt.title("Vertical Center Line"), plt.legend()
    plt.tight_layout()
    plt.show()

    def apply_filters(fshift, rows, cols):
        crow, ccol = rows//2, cols//2
        x, y = np.arange(cols)-ccol, np.arange(rows)-crow
        X, Y = np.meshgrid(x, y)
        d = np.sqrt(X**2 + Y**2)
        cutoff = 0.1 * min(rows, cols)
        mask_ideal = np.zeros((rows, cols), np.uint8)
        cv2.circle(mask_ideal, (ccol, crow), int(cutoff/2), 1, -1)
        mask_gaussian = np.exp(-(d**2)/(2*cutoff**2))
        mask_butter = 1/(1+(d/cutoff)**(2*2))
        mask_ideal_hp = 1 - mask_ideal
        mask_gaussian_hp = 1 - mask_gaussian
        mask_butter_hp = 1 - mask_butter
        return {
            "Ideal_LPF": (mask_ideal, fshift*mask_ideal),
            "Gaussian_LPF": (mask_gaussian, fshift*mask_gaussian),
            "Butter_LPF": (mask_butter, fshift*mask_butter),
            "Ideal_HPF": (mask_ideal_hp, fshift*mask_ideal_hp),
            "Gaussian_HPF": (mask_gaussian_hp, fshift*mask_gaussian_hp),
            "Butter_HPF": (mask_butter_hp, fshift*mask_butter_hp)
        }

    filters = apply_filters(fshift1, height, width)

    for name, (mask, filtered) in filters.items():
        img_filtered = np.abs(np.fft.ifft2(np.fft.ifftshift(filtered)))
        plt.figure(figsize=(6, 3))
        plt.subplot(1, 2, 1), plt.imshow(mask, cmap='gray'), plt.title(f"{name} Mask"), plt.axis('off')
        plt.subplot(1, 2, 2), plt.imshow(img_filtered, cmap='gray'), plt.title(f"{name} Image"), plt.axis('off')
        plt.tight_layout()
        plt.show()


FILTERING

import cv2
import numpy as np
import matplotlib.pyplot as plt

def mean_filter(img, ksize=3):
    return cv2.blur(img, (ksize, ksize))

def median_filter(img, ksize=3):
    return cv2.medianBlur(img, ksize)

def gaussian_filter(img, ksize=3, sigma=1.0):
    return cv2.GaussianBlur(img, (ksize, ksize), sigma)

def averaging_filter(img, ksize=3):
    return cv2.blur(img, (ksize, ksize))

def sharpness_score(img):
    return cv2.Laplacian(img, cv2.CV_64F).var()

if __name__ == "__main__":
    img_noisy = cv2.imread("salt_pepper_noise.png", cv2.IMREAD_GRAYSCALE)

    filters = {
        "Mean": mean_filter(img_noisy),
        "Median": median_filter(img_noisy),
        "Gaussian": gaussian_filter(img_noisy),
        "Averaging": averaging_filter(img_noisy)
    }

    scores = {name: sharpness_score(fimg) for name, fimg in filters.items()}
    best_filter = max(scores, key=scores.get)

    print("Sharpness Scores:", scores)
    print("Best Filter:", best_filter)

    plt.figure(figsize=(10, 5))
    plt.subplot(1, len(filters)+1, 1)
    plt.imshow(img_noisy, cmap="gray")
    plt.title("Noisy")
    plt.axis("off")

    for i, (name, fimg) in enumerate(filters.items(), start=2):
        plt.subplot(1, len(filters)+1, i)
        plt.imshow(fimg, cmap="gray")
        plt.title(f"{name}")
        plt.axis("off")

    plt.tight_layout()
    plt.show()
